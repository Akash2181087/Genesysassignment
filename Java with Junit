import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import io.restassured.specification.RequestSpecification;
import org.junit.jupiter.api.*;

import static io.restassured.RestAssured.*;
import static org.junit.jupiter.api.Assertions.*;

@TestInstance(TestInstance.Lifecycle.PER_CLASS)
public class MessageApiTest {

    private static final String BASE_URL = "http://localhost:3000"; // Adjust as per your local setup
    private static String messageId; // To store the ID of a message created during testing

    private ObjectMapper objectMapper;

    @BeforeAll
    public void setup() {
        RestAssured.baseURI = BASE_URL;
        objectMapper = new ObjectMapper();
    }

    @Test
    public void testCreateMessage() {
        // Given
        ObjectNode requestBody = objectMapper.createObjectNode();
        requestBody.putObject("from").put("id", "fromUserId");
        requestBody.putObject("to").put("id", "toUserId");
        requestBody.put("message", "Test message content");

        // When
        Response response = given()
                .contentType(ContentType.JSON)
                .body(requestBody)
                .post("/message");

        // Then
        assertEquals(201, response.getStatusCode(), "Expected status code 201 (Created)");
        JsonNode responseBody = response.getBody().as(JsonNode.class);
        assertNotNull(responseBody.get("id").asText(), "Expected message ID to be not null");
        messageId = responseBody.get("id").asText();
    }

    @Test
    public void testGetMessageById() {
        // When
        Response response = get("/message/" + messageId);

        // Then
        assertEquals(200, response.getStatusCode(), "Expected status code 200 (OK)");
        JsonNode responseBody = response.getBody().as(JsonNode.class);
        assertEquals(messageId, responseBody.get("id").asText(), "Expected message ID to match");
    }

    @Test
    public void testUpdateMessage() {
        // Given
        ObjectNode requestBody = objectMapper.createObjectNode();
        requestBody.put("message", "Updated message content");

        // When
        Response response = given()
                .contentType(ContentType.JSON)
                .body(requestBody)
                .put("/message/" + messageId);

        // Then
        assertEquals(200, response.getStatusCode(), "Expected status code 200 (OK)");
        JsonNode responseBody = response.getBody().as(JsonNode.class);
        assertEquals("Updated message content", responseBody.get("message").asText(),
                "Expected updated message content");
    }

    @Test
    public void testDeleteMessage() {
        // When
        Response response = delete("/message/" + messageId);

        // Then
        assertEquals(204, response.getStatusCode(), "Expected status code 204 (No Content)");
    }

   }


    
  
